syntax = "proto3";

option go_package = "github.com/mingkaic/ultrasound/viewer/proto";

package viewer;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// ======== GENERAL MESSAGE OBJECTS ========

message NodeLoc {
    // maximum distance from a leaf node
    uint32 maxheight = 1;

    // minimum distance from a leaf node
    uint32 minheight = 2;
}

message NodeInfo {
    int32 id = 1;

    repeated uint32 shape = 2;

    map<string,string> tags = 3;

    NodeLoc location = 4;

    google.protobuf.Timestamp created = 5;

    google.protobuf.Timestamp updated = 6;
}

message EdgeInfo {
    int32 parent = 1;

    int32 child = 2;

    string label = 3;

    string shaper = 4;

    string coorder = 5;

    google.protobuf.Timestamp created = 6;

    google.protobuf.Timestamp updated = 7;
}

message GraphInfo {
    string graph_id = 1;

    repeated NodeInfo nodes = 2;

    repeated EdgeInfo edges = 3;
}

message NodeData {
    string graph_id = 1;

    int32 node_id = 2;

    repeated float data = 3;

    google.protobuf.Timestamp created = 4;

    google.protobuf.Timestamp updated = 5;
}

enum Status {
    OK = 0;
    BAD_INPUT = 1; // basically 400's error
    INTERNAL_ERR = 2; // basically 500's error
    UNKNOWN = 3; // something bad
}

// ======== REQUEST + RESPONSE MESSAGES ========

message ListGraphRequest {}

message ListGraphResponse {
    repeated string result = 1;

    Status status = 2;

    string message = 3;
}

message GetGraphRequest {
    string graph_id = 1;
}

message GetGraphResponse {
    GraphInfo result = 1;

    Status status = 2;

    string message = 3;
}

message GetNodeDataRequest {
    string graph_id = 1;

    int32 node_id = 2;
}

message GetNodeDataResponse {
    NodeData result = 1;

    Status status = 2;

    string message = 3;
}

message DeleteGraphRequest {
    string graph_id = 1;
}

message DeleteGraphResponse {
    Status status = 1;

    string message = 2;
}

service Viewer {
    // List all graph ids
    rpc ListGraphs (ListGraphRequest) returns (ListGraphResponse) {
        option (google.api.http) = {
            get: "/v1/graphs"
        };
    }

    // Get GraphInfo specified by graph id
    rpc GetGraph (GetGraphRequest) returns (GetGraphResponse) {
        option (google.api.http) = {
            get: "/v1/graphs/{graph_id}"
        };
    }

    // Get NodeData specified by graph id and node id
    rpc GetNodeData (GetNodeDataRequest) returns (GetNodeDataResponse) {
        option (google.api.http) = {
            get: "/v1/graphs/{graph_id}/{node_id}"
        };
    }

    // Delete graph
    rpc DeleteGraph (DeleteGraphRequest) returns (DeleteGraphResponse) {
        option (google.api.http) = {
            delete: "/v1/graphs/{graph_id}"
        };
    }
}
